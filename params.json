{
  "name": "Buildpack-elixir",
  "tagline": "",
  "body": "# Bluemix and Heroku Buildpack for Elixir\r\n\r\n## Features\r\n\r\n* **Easy configuration** with `elixir_buildpack.config` file\r\n* Use **prebuilt Elixir binaries**\r\n* `DATABASE_URL` can be made available at compile time adding it to `config_vars_to_export` in `elixir_buildpack.config`\r\n* Allows configuring Erlang\r\n* If your app doesn't have a Procfile, default web task `mix run --no-halt` will be run.\r\n* Consolidates protocols\r\n* Hex and rebar support\r\n* Caching of Hex packages, Mix dependencies and downloads\r\n* Pre & Post compilation hooks through `pre_compile`, `post_compile` configuration\r\n\r\n\r\n#### Version support\r\n\r\n* Erlang - Prebuilt packages (17.5, 17.4, etc)\r\n* Elixir - Prebuilt releases (1.0.4, 1.0.3, etc) or prebuilt branches (master, stable, etc)\r\n\r\n\r\n## Usage\r\n\r\n#### Create a Bluemix app with this buildpack\r\n\r\ncf login -a \"Bluemix Endpoint e.g.https://api.ng.bluemix.net > US\"\r\n\r\ncf push $APP_NAME -b https://github.com/xyrox2/buildpack-elixir.git\r\n\r\nvoila\r\n#### Create a Heroku app with this buildpack\r\n\r\n```\r\nheroku create --buildpack \"https://github.com/xyrox2/buildpack-elixir.git\"\r\n```\r\n\r\nThe above method always uses the latest version of the buildpack. To use a specific older version of the buildpack, [see notes below](#using-older-version-of-buildpack).\r\n\r\n## Configuration\r\n\r\nCreate a `elixir_buildpack.config` file in your app's root dir. The file's syntax is bash.\r\n\r\nIf you don't specify a config option, then the default option from the buildpack's [`elixir_buildpack.config`](https://github.com/xyrox2/buildpack-elixir/blob/master/elixir_buildpack.config) file will be used.\r\n\r\n\r\n__Here's a full config file with all available options:__\r\n\r\n```\r\n# Erlang version\r\nerlang_version=18.2.1\r\n\r\n# Elixir version\r\nelixir_version=1.2.0\r\n\r\n# Always rebuild from scratch on every deploy?\r\nalways_rebuild=false\r\n\r\n# Export heroku config vars\r\nconfig_vars_to_export=(DATABASE_URL)\r\n\r\n# A command to run right before compiling the app (after elixir, .etc)\r\npre_compile=\"pwd\"\r\n\r\n# A command to run right after compiling the app\r\npost_compile=\"pwd\"\r\n\r\n# Set the path the app is run from\r\nruntime_path=/app\r\n```\r\n\r\n\r\n#### Specifying Elixir version\r\n\r\n* Use prebuilt Elixir release\r\n\r\n```\r\nelixir_version=1.3.2\r\n```\r\n\r\n* Use prebuilt Elixir branch, the *branch* specifier ensures that it will be downloaded every time\r\n\r\n```\r\nelixir_version=(branch master)\r\n```\r\n\r\n#### Specifying Erlang version\r\n\r\n* You can specify an Erlang release version like below\r\n\r\n```\r\nerlang_version=19.0.2\r\n```\r\n\r\n#### Specifying config vars to export at compile time\r\n\r\n* To set a config var on your heroku node you can exec from the shell:\r\n\r\n```\r\nheroku config:set MY_VAR=the_value\r\n```\r\n\r\n* Add the config vars you want to be exported in your `elixir_buildpack.config` file:\r\n\r\n```\r\nconfig_vars_to_export=(DATABASE_URL MY_VAR)\r\n```\r\n\r\n## Other notes\r\n\r\n* Add your own `Procfile` to your application, else the default web task `mix run --no-halt` will be used.\r\n\r\n* Your application should build embedded and start permanent. Build embedded will consolidate protocols for a performance boost, start permanent will ensure that Heroku restarts your application if it crashes. See below for an example of how to use these features in your Mix project:\r\n\r\n  ```elixir\r\n  defmodule MyApp.Mixfile do\r\n    use Mix.Project\r\n\r\n    def project do\r\n      [app: :my_app,\r\n       version: \"0.0.1\",\r\n       build_embedded: Mix.env == :prod,\r\n       start_permanent: Mix.env == :prod]\r\n    end\r\n  end\r\n  ```\r\n\r\n* The buildpack will execute the commands configured in `pre_compile` and/or `post_compile` in the root directory of your application before/after it has been compiled (respectively). These scripts can be used to build or prepare things for your application, for example compiling assets.\r\n\r\n## Development\r\n\r\n* Build scripts to build erlang are at <https://github.com/HashNuke/heroku-buildpack-elixir-otp-builds>\r\n* Sample app to test is available at <https://github.com/HashNuke/heroku-buildpack-elixir-test>\r\n\r\n\r\n## Credits\r\n\r\n&copy; Roman Lewin based on work of Akash Manohar under The MIT License. Feel free to do whatever you want with it.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}